package com.expense.serviceImpl;

//ExpenseServiceImpl.java
package com.rakbank.pfm.expenseservice.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import com.expense.dto.ExpenseRequest;
import com.expense.dto.ExpenseResponse;
import com.expense.entity.Expense;
import com.expense.repository.ExpenseRepository;
import com.expense.service.ExpenseService;
import com.rakbank.pfm.expenseservice.exception.ExpenseNotFoundException;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ExpenseServiceImpl implements ExpenseService {

 private final ExpenseRepository expenseRepository;
 private final ModelMapper modelMapper;

 @Override
 public ExpenseResponse createExpense(ExpenseRequest expenseRequest) {
     Expense expense = modelMapper.map(expenseRequest, Expense.class);
     Expense savedExpense = expenseRepository.save(expense);
     return modelMapper.map(savedExpense, ExpenseResponse.class);
 }

 @Override
 public ExpenseResponse getExpenseById(Long id) {
     Expense expense = expenseRepository.findById(id)
             .orElseThrow(() -> new ExpenseNotFoundException("Expense not found with id: " + id));
     return modelMapper.map(expense, ExpenseResponse.class);
 }

 @Override
 public List<ExpenseResponse> getAllExpensesByUserId(Long userId) {
     return expenseRepository.findByUserId(userId).stream()
             .map(expense -> modelMapper.map(expense, ExpenseResponse.class))
             .collect(Collectors.toList());
 }

 @Override
 public List<ExpenseResponse> getExpensesByUserIdAndCategory(Long userId, String category) {
     return expenseRepository.findByUserIdAndCategory(userId, category).stream()
             .map(expense -> modelMapper.map(expense, ExpenseResponse.class))
             .collect(Collectors.toList());
 }

 @Override
 public ExpenseResponse updateExpense(Long id, ExpenseRequest expenseRequest) {
     Expense existingExpense = expenseRepository.findById(id)
             .orElseThrow(() -> new ExpenseNotFoundException("Expense not found with id: " + id));
     
     modelMapper.map(expenseRequest, existingExpense);
     Expense updatedExpense = expenseRepository.save(existingExpense);
     return modelMapper.map(updatedExpense, ExpenseResponse.class);
 }

 @Override
 public void deleteExpense(Long id) {
     if (!expenseRepository.existsById(id)) {
         throw new ExpenseNotFoundException("Expense not found with id: " + id);
     }
     expenseRepository.deleteById(id);
 }
}
