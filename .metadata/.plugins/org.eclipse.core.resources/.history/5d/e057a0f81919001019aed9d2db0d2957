package com.budget.serviceimpl;

import java.math.BigDecimal;
import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import com.budget.dto.BudgetRequest;
import com.budget.dto.BudgetResponse;
import com.budget.entity.Budget;
import com.budget.exception.BudgetNotFoundException;
import com.budget.repository.BudgetRepository;
import com.budget.service.BudgetService;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class BudgetServiceImpl implements BudgetService {

	private final BudgetRepository budgetRepository;
	private final ModelMapper modelMapper;

	@Override
	@Transactional
	public BudgetResponse createBudget(BudgetRequest budgetRequest) {
		Budget budget = modelMapper.map(budgetRequest, Budget.class);
		Budget savedBudget = budgetRepository.save(budget);
		return modelMapper.map(savedBudget, BudgetResponse.class);
	}

	@Override
	public BudgetResponse getBudgetById(Long id) {
		Budget budget = budgetRepository.findById(id)
				.orElseThrow(() -> new BudgetNotFoundException("Budget not found with id: " + id));
		return modelMapper.map(budget, BudgetResponse.class);
	}

	@Override
	public List<BudgetResponse> getAllBudgetsByUserId(Long userId) {
		return budgetRepository.findByUserId(userId).stream()
				.map(budget -> modelMapper.map(budget, BudgetResponse.class)).collect(Collectors.toList());
	}

	@Override
	public BudgetResponse updateBudget(Long id, BudgetRequest budgetRequest) {
		Budget existingBudget = budgetRepository.findById(id)
				.orElseThrow(() -> new BudgetNotFoundException("Budget not found with id: " + id));

		modelMapper.map(budgetRequest, existingBudget);
		Budget updatedBudget = budgetRepository.save(existingBudget);
		return modelMapper.map(updatedBudget, BudgetResponse.class);
	}

	@Override
	public void deleteBudget(Long id) {
		if (!budgetRepository.existsById(id)) {
			throw new BudgetNotFoundException("Budget not found with id: " + id);
		}
		budgetRepository.deleteById(id);
	}
	
	@Override
    public BigDecimal getBudgetAmountForUserAndCategory(Long userId, String category) {
        return budgetRepository.findByUserIdAndCategory(userId, category)
                .stream()
                .findFirst() // Get the first matching budget (assuming one budget per category)
                .map(Budget::getAmount)
                .orElse(BigDecimal.ZERO); // Return 0 if no budget exists
    }
}
