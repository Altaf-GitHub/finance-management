package com.notification.serviceImpl;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import com.expense.dto.ExpenseRequest;
import com.expense.entity.Expense;
import com.notification.dto.NotificationRequest;
import com.notification.dto.NotificationResponse;
import com.notification.entity.Notification;
import com.notification.exception.NotificationNotFoundException;
import com.notification.repository.NotificationRepository;
import com.notification.service.NotificationService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class NotificationServiceImpl implements NotificationService {

	private final NotificationRepository notificationRepository;
	private final ModelMapper modelMapper;

	@Override
	public NotificationResponse createNotification(NotificationRequest notificationRequest) {
		modelMapper.typeMap(NotificationRequest.class, Notification.class)
        .addMappings(mapper -> mapper.skip(Notification::setId));
		Notification notification = modelMapper.map(notificationRequest, Notification.class);
		notification.setCreatedAt(LocalDateTime.now());
		notification.setRead(false);
		Notification savedNotification = notificationRepository.save(notification);
		return modelMapper.map(savedNotification, NotificationResponse.class);
	}

	@Override
	public List<NotificationResponse> getAllNotificationsByUserId(Long userId) {
		return notificationRepository.findByUserId(userId).stream()
				.map(notification -> modelMapper.map(notification, NotificationResponse.class))
				.collect(Collectors.toList());
	}

	@Override
	public List<NotificationResponse> getUnreadNotificationsByUserId(Long userId) {
		return notificationRepository.findByUserIdAndReadFalse(userId).stream()
				.map(notification -> modelMapper.map(notification, NotificationResponse.class))
				.collect(Collectors.toList());
	}

	@Override
	public NotificationResponse markAsRead(Long id) {
		Notification notification = notificationRepository.findById(id)
				.orElseThrow(() -> new NotificationNotFoundException("Notification not found with id: " + id));

		notification.setRead(true);
		Notification updatedNotification = notificationRepository.save(notification);
		return modelMapper.map(updatedNotification, NotificationResponse.class);
	}
}
